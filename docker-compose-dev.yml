version: '3'
services:
  mongodb:
    extends:
      file: ./.docker/compose/mongodb.yml
      service: mongodb
    ports:
      - '27030:27017'
    volumes:
      - ${PWD}/.docker/config/mongo/init-mongo.js:/docker-entrypoint-initdb.d/init-mongo.js:ro
      - ${PWD}/.docker/mongodb_data:/data/db
    networks:
      - crane-network
    command: [ --replSet", "dbrs", "--bind_ip_all" ]
    healthcheck:
      test:
        [
          "CMD",
          "mongosh",
          "--host", "localhost",
          "--eval", "db.adminCommand('ping')",
        ]
      interval: 5s
      timeout: 2s
      retries: 5
      start_period: 20s

  mongodb-init-rs:
    extends:
      file: ./.docker/compose/mongodb.yml
      service: mongodb
    container_name: crane_be_mongodb_init_rs
    restart: 'no'
    depends_on:
      mongodb:
        condition: service_healthy
    networks:
      - crane-network
    command: >
      mongosh 
        --host mongodb:27017 
        --eval "
          rs.initiate({
            _id: 'dbrs',
            members: [{ _id: 0, host: 'mongodb:27017' }]
          });
        "

  redis:
    extends:
      file: ./.docker/compose/redis.yml
      service: redis
    ports:
      - '63079:6379'
    networks:
      - crane-network
    volumes:
      - ${PWD}/.docker/redis-data:/data
    command: redis-server --appendonly yes --dir /data

  minio:
    extends:
      file: ./.docker/compose/minio.yml
      service: minio
    volumes:
      - ${PWD}/.docker/minio-data:/data
    ports:
      - "9100:9000"
      - "9101:9001"
    environment:
      - MINIO_ROOT_USER=${AWS_S3_ACCESS_KEY_ID}
      - MINIO_ROOT_PASSWORD=${AWS_S3_SECRET_ACCESS_KEY}
    networks:
      - crane-network

volumes:
  redis-data:
  mongodb_data:
  minio-data:

networks:
  crane-network:
    driver: bridge